package com.arellomobile.mvp;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import android.util.Log;

import com.arellomobile.mvp.presenter.PresenterField;

/**
 * Date: 18-Dec-15
 * Time: 13:16
 *
 * @author Alexander Blinov
 */
public class MvpProcessor
{
	private static final String TAG = "MvpProcessor";

	public static final String PRESENTER_BINDER_SUFFIX = "$$PresentersBinder";
	public static final String VIEW_STATE_SUFFIX = "$$State";
	public static final String FACTORY_PARAMS_HOLDER_SUFFIX = "$$ParamsHolder";
	public static final String PRESENTER_BINDER_INNER_SUFFIX = "Binder";
	public static final String VIEW_STATE_CLASS_NAME_PROVIDER_SUFFIX = "$$ViewStateClassNameProvider";

	/**
	 * Return all info about injected presenters and factories in view
	 *
	 * @param delegated   class contains presenter
	 * @param <Delegated> type of delegated
	 * @return PresenterBinder instance
	 */
	private <Delegated> PresenterBinder<Delegated> getPresenterBinder(Delegated delegated)
	{
		PresenterBinder<Delegated> binder;
		try
		{
			//noinspection unchecked
			binder = (PresenterBinder<Delegated>) findPresenterBinderForClass(delegated.getClass());
		}
		catch (InstantiationException e)
		{
			throw new IllegalStateException("can not instantiate binder for " + delegated.getClass().getName(), e);
		}
		catch (IllegalAccessException e)
		{
			throw new IllegalStateException("have no access to binder for " + delegated.getClass().getName(), e);
		}

		return binder;
	}

	/**
	 * Find generated binder for class
	 *
	 * @param clazz       class of presenter container
	 * @param <Delegated> type of presenter container
	 * @return PresenterBinder instance
	 * @throws IllegalAccessException
	 * @throws InstantiationException
	 */
	private <Delegated> PresenterBinder<? super Delegated> findPresenterBinderForClass(Class<Delegated> clazz)
			throws IllegalAccessException, InstantiationException
	{
		PresenterBinder<? super Delegated> presenterBinder;
		String clsName = clazz.getName();

		String className = clsName + PRESENTER_BINDER_SUFFIX;
		try
		{
			Class<?> presenterBinderClass = Class.forName(className);
			//noinspection unchecked
			presenterBinder = (PresenterBinder<? super Delegated>) presenterBinderClass.newInstance();

		}
		catch (ClassNotFoundException e)
		{
			Log.d(TAG, "Not found " + className + ". Trying superclass " + (clazz.getSuperclass().getName()));

			if (clazz.getSuperclass() == Object.class)
			{
				return null;
			}
			presenterBinder = findPresenterBinderForClass(clazz.getSuperclass());
		}
		//TODO add to binders array

		return presenterBinder;
	}

	/**
	 * 1) Generates tag for identification MvpPresenter using params.
	 * Custom presenter factory should use interface {@link ParamsProvider}'s method annotated with {@link ParamsProvider} to provide params from view
	 * <p>
	 * {@link com.arellomobile.mvp.DefaultPresenterFactory} works with {@link com.arellomobile.mvp.DefaultPresenterFactory.Params}.
	 * Default factory doesn't need in special method of view to provide params. It takes param from {@link com.arellomobile.mvp.presenter.InjectPresenter} annotation fields
	 * <p>
	 * 2) Checks if presenter with tag is already exist in {@link com.arellomobile.mvp.PresenterStore}, and returns it.
	 * <p>
	 * 3)If {@link com.arellomobile.mvp.PresenterStore} doesn't contain MvpPresenter with current tag, {@link com.arellomobile.mvp.PresenterFactory} will create it
	 *
	 * @param presenterField info about presenter from {@link com.arellomobile.mvp.presenter.InjectPresenter}
	 * @param delegated      class contains presenter
	 * @param delegateTag    unique tag generated by {@link MvpDelegate#generateTag()}
	 * @param <Delegated>    type of delegated
	 * @return MvpPresenter instance
	 */
	private <Delegated> MvpPresenter<? super Delegated> getMvpPresenter(PresenterField<? super Delegated> presenterField, Delegated delegated, String delegateTag)
	{
		Class<? extends MvpPresenter<?>> presenterClass = presenterField.getPresenterClass();
		Class<? extends PresenterFactory<?, ?>> presenterFactoryClass = presenterField.getFactory();
		ParamsHolder<?> holder = MvpFacade.getInstance().getPresenterFactoryStore().getParamsHolder(presenterField.getParamsHolderClass());
		PresenterStore presenterStore = MvpFacade.getInstance().getPresenterStore();
		PresenterFactory presenterFactory = MvpFacade.getInstance().getPresenterFactoryStore().getPresenterFactory(presenterFactoryClass);

		Object params = holder.getParams(presenterField, delegated, delegateTag);

		//TODO throw exception
		//noinspection unchecked
		String tag = presenterFactory.createTag(presenterClass, params);

		//noinspection unchecked
		MvpPresenter<? super Delegated> presenter = presenterStore.get(tag, presenterClass);
		if (presenter != null)
		{
			return presenter;
		}

		//noinspection unchecked
		presenter = presenterFactory.createPresenter(presenterClass, params);
		presenter.setPresenterType(presenterField.getPresenterType());
		presenter.setTag(tag);
		presenterStore.add(tag, presenter);

		return presenter;
	}


	/**
	 * Gets presenters {@link java.util.List} annotated with {@link com.arellomobile.mvp.presenter.InjectPresenter} for view.
	 * <p>
	 * See full info about getting presenter instance in {@link #getMvpPresenter}
	 *
	 * @param delegated   class contains presenter
	 * @param delegateTag unique tag generated by {@link MvpDelegate#generateTag()}
	 * @param <Delegated> type of delegated
	 * @return presenters list for specifies presenters container
	 */
	<Delegated> List<MvpPresenter<? super Delegated>> getMvpPresenters(Delegated delegated, String delegateTag)
	{
		PresenterBinder<Delegated> binder = MvpFacade.getInstance().getMvpProcessor().getPresenterBinder(delegated);

		if (binder == null)
		{
			return Collections.emptyList();
		}

		binder.setTarget(delegated);

		List<PresenterField<? super Delegated>> presenterFields = binder.getPresenterFields();
		List<MvpPresenter<? super Delegated>> presenters = new ArrayList<>(presenterFields.size());

		for (PresenterField<? super Delegated> presenterField : presenterFields)
		{
			MvpPresenter<? super Delegated> presenter = getMvpPresenter(presenterField, delegated, delegateTag);

			if (presenter != null)
			{
				presenters.add(presenter);
				presenterField.setValue(presenter);
			}
		}
		return presenters;
	}
}
